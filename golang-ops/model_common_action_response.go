/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CommonActionResponse struct for CommonActionResponse
type CommonActionResponse struct {
	ErrorCode *int32 `json:"error_code,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
}

// NewCommonActionResponse instantiates a new CommonActionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonActionResponse() *CommonActionResponse {
	this := CommonActionResponse{}
	return &this
}

// NewCommonActionResponseWithDefaults instantiates a new CommonActionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonActionResponseWithDefaults() *CommonActionResponse {
	this := CommonActionResponse{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *CommonActionResponse) GetErrorCode() int32 {
	if o == nil || o.ErrorCode == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonActionResponse) GetErrorCodeOk() (*int32, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *CommonActionResponse) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *CommonActionResponse) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *CommonActionResponse) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonActionResponse) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *CommonActionResponse) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *CommonActionResponse) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o CommonActionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorCode != nil {
		toSerialize["error_code"] = o.ErrorCode
	}
	if o.ErrorMessage != nil {
		toSerialize["error_message"] = o.ErrorMessage
	}
	return json.Marshal(toSerialize)
}

type NullableCommonActionResponse struct {
	value *CommonActionResponse
	isSet bool
}

func (v NullableCommonActionResponse) Get() *CommonActionResponse {
	return v.value
}

func (v *NullableCommonActionResponse) Set(val *CommonActionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonActionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonActionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonActionResponse(val *CommonActionResponse) *NullableCommonActionResponse {
	return &NullableCommonActionResponse{value: val, isSet: true}
}

func (v NullableCommonActionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonActionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


