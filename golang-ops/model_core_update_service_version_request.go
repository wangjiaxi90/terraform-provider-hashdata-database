/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreUpdateServiceVersionRequest struct for CoreUpdateServiceVersionRequest
type CoreUpdateServiceVersionRequest struct {
	Arch *string `json:"arch,omitempty"`
	DowngradeTo *CoreUpdateVersionDetailRequest `json:"downgrade_to,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Image *string `json:"image,omitempty"`
	UpgradeFrom *CoreUpdateVersionDetailRequest `json:"upgrade_from,omitempty"`
}

// NewCoreUpdateServiceVersionRequest instantiates a new CoreUpdateServiceVersionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreUpdateServiceVersionRequest() *CoreUpdateServiceVersionRequest {
	this := CoreUpdateServiceVersionRequest{}
	return &this
}

// NewCoreUpdateServiceVersionRequestWithDefaults instantiates a new CoreUpdateServiceVersionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreUpdateServiceVersionRequestWithDefaults() *CoreUpdateServiceVersionRequest {
	this := CoreUpdateServiceVersionRequest{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *CoreUpdateServiceVersionRequest) GetArch() string {
	if o == nil || o.Arch == nil {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreUpdateServiceVersionRequest) GetArchOk() (*string, bool) {
	if o == nil || o.Arch == nil {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *CoreUpdateServiceVersionRequest) HasArch() bool {
	if o != nil && o.Arch != nil {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *CoreUpdateServiceVersionRequest) SetArch(v string) {
	o.Arch = &v
}

// GetDowngradeTo returns the DowngradeTo field value if set, zero value otherwise.
func (o *CoreUpdateServiceVersionRequest) GetDowngradeTo() CoreUpdateVersionDetailRequest {
	if o == nil || o.DowngradeTo == nil {
		var ret CoreUpdateVersionDetailRequest
		return ret
	}
	return *o.DowngradeTo
}

// GetDowngradeToOk returns a tuple with the DowngradeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreUpdateServiceVersionRequest) GetDowngradeToOk() (*CoreUpdateVersionDetailRequest, bool) {
	if o == nil || o.DowngradeTo == nil {
		return nil, false
	}
	return o.DowngradeTo, true
}

// HasDowngradeTo returns a boolean if a field has been set.
func (o *CoreUpdateServiceVersionRequest) HasDowngradeTo() bool {
	if o != nil && o.DowngradeTo != nil {
		return true
	}

	return false
}

// SetDowngradeTo gets a reference to the given CoreUpdateVersionDetailRequest and assigns it to the DowngradeTo field.
func (o *CoreUpdateServiceVersionRequest) SetDowngradeTo(v CoreUpdateVersionDetailRequest) {
	o.DowngradeTo = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CoreUpdateServiceVersionRequest) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreUpdateServiceVersionRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CoreUpdateServiceVersionRequest) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CoreUpdateServiceVersionRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *CoreUpdateServiceVersionRequest) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreUpdateServiceVersionRequest) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *CoreUpdateServiceVersionRequest) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *CoreUpdateServiceVersionRequest) SetImage(v string) {
	o.Image = &v
}

// GetUpgradeFrom returns the UpgradeFrom field value if set, zero value otherwise.
func (o *CoreUpdateServiceVersionRequest) GetUpgradeFrom() CoreUpdateVersionDetailRequest {
	if o == nil || o.UpgradeFrom == nil {
		var ret CoreUpdateVersionDetailRequest
		return ret
	}
	return *o.UpgradeFrom
}

// GetUpgradeFromOk returns a tuple with the UpgradeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreUpdateServiceVersionRequest) GetUpgradeFromOk() (*CoreUpdateVersionDetailRequest, bool) {
	if o == nil || o.UpgradeFrom == nil {
		return nil, false
	}
	return o.UpgradeFrom, true
}

// HasUpgradeFrom returns a boolean if a field has been set.
func (o *CoreUpdateServiceVersionRequest) HasUpgradeFrom() bool {
	if o != nil && o.UpgradeFrom != nil {
		return true
	}

	return false
}

// SetUpgradeFrom gets a reference to the given CoreUpdateVersionDetailRequest and assigns it to the UpgradeFrom field.
func (o *CoreUpdateServiceVersionRequest) SetUpgradeFrom(v CoreUpdateVersionDetailRequest) {
	o.UpgradeFrom = &v
}

func (o CoreUpdateServiceVersionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arch != nil {
		toSerialize["arch"] = o.Arch
	}
	if o.DowngradeTo != nil {
		toSerialize["downgrade_to"] = o.DowngradeTo
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.UpgradeFrom != nil {
		toSerialize["upgrade_from"] = o.UpgradeFrom
	}
	return json.Marshal(toSerialize)
}

type NullableCoreUpdateServiceVersionRequest struct {
	value *CoreUpdateServiceVersionRequest
	isSet bool
}

func (v NullableCoreUpdateServiceVersionRequest) Get() *CoreUpdateServiceVersionRequest {
	return v.value
}

func (v *NullableCoreUpdateServiceVersionRequest) Set(val *CoreUpdateServiceVersionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreUpdateServiceVersionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreUpdateServiceVersionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreUpdateServiceVersionRequest(val *CoreUpdateServiceVersionRequest) *NullableCoreUpdateServiceVersionRequest {
	return &NullableCoreUpdateServiceVersionRequest{value: val, isSet: true}
}

func (v NullableCoreUpdateServiceVersionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreUpdateServiceVersionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


