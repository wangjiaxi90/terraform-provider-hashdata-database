/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreDescribeVendorResponse struct for CoreDescribeVendorResponse
type CoreDescribeVendorResponse struct {
	Available *bool `json:"available,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewCoreDescribeVendorResponse instantiates a new CoreDescribeVendorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreDescribeVendorResponse() *CoreDescribeVendorResponse {
	this := CoreDescribeVendorResponse{}
	return &this
}

// NewCoreDescribeVendorResponseWithDefaults instantiates a new CoreDescribeVendorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreDescribeVendorResponseWithDefaults() *CoreDescribeVendorResponse {
	this := CoreDescribeVendorResponse{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *CoreDescribeVendorResponse) GetAvailable() bool {
	if o == nil || o.Available == nil {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeVendorResponse) GetAvailableOk() (*bool, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *CoreDescribeVendorResponse) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *CoreDescribeVendorResponse) SetAvailable(v bool) {
	o.Available = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CoreDescribeVendorResponse) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeVendorResponse) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CoreDescribeVendorResponse) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CoreDescribeVendorResponse) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CoreDescribeVendorResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeVendorResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CoreDescribeVendorResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CoreDescribeVendorResponse) SetName(v string) {
	o.Name = &v
}

func (o CoreDescribeVendorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableCoreDescribeVendorResponse struct {
	value *CoreDescribeVendorResponse
	isSet bool
}

func (v NullableCoreDescribeVendorResponse) Get() *CoreDescribeVendorResponse {
	return v.value
}

func (v *NullableCoreDescribeVendorResponse) Set(val *CoreDescribeVendorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreDescribeVendorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreDescribeVendorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreDescribeVendorResponse(val *CoreDescribeVendorResponse) *NullableCoreDescribeVendorResponse {
	return &NullableCoreDescribeVendorResponse{value: val, isSet: true}
}

func (v NullableCoreDescribeVendorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreDescribeVendorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


