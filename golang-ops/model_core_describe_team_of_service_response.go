/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreDescribeTeamOfServiceResponse struct for CoreDescribeTeamOfServiceResponse
type CoreDescribeTeamOfServiceResponse struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Role *CoreDescribeRoleResponse `json:"role,omitempty"`
	Service *string `json:"service,omitempty"`
	Team *string `json:"team,omitempty"`
	Tenant *string `json:"tenant,omitempty"`
}

// NewCoreDescribeTeamOfServiceResponse instantiates a new CoreDescribeTeamOfServiceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreDescribeTeamOfServiceResponse() *CoreDescribeTeamOfServiceResponse {
	this := CoreDescribeTeamOfServiceResponse{}
	return &this
}

// NewCoreDescribeTeamOfServiceResponseWithDefaults instantiates a new CoreDescribeTeamOfServiceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreDescribeTeamOfServiceResponseWithDefaults() *CoreDescribeTeamOfServiceResponse {
	this := CoreDescribeTeamOfServiceResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CoreDescribeTeamOfServiceResponse) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeTeamOfServiceResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CoreDescribeTeamOfServiceResponse) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CoreDescribeTeamOfServiceResponse) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *CoreDescribeTeamOfServiceResponse) GetRole() CoreDescribeRoleResponse {
	if o == nil || o.Role == nil {
		var ret CoreDescribeRoleResponse
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeTeamOfServiceResponse) GetRoleOk() (*CoreDescribeRoleResponse, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *CoreDescribeTeamOfServiceResponse) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given CoreDescribeRoleResponse and assigns it to the Role field.
func (o *CoreDescribeTeamOfServiceResponse) SetRole(v CoreDescribeRoleResponse) {
	o.Role = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *CoreDescribeTeamOfServiceResponse) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeTeamOfServiceResponse) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *CoreDescribeTeamOfServiceResponse) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *CoreDescribeTeamOfServiceResponse) SetService(v string) {
	o.Service = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *CoreDescribeTeamOfServiceResponse) GetTeam() string {
	if o == nil || o.Team == nil {
		var ret string
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeTeamOfServiceResponse) GetTeamOk() (*string, bool) {
	if o == nil || o.Team == nil {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *CoreDescribeTeamOfServiceResponse) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given string and assigns it to the Team field.
func (o *CoreDescribeTeamOfServiceResponse) SetTeam(v string) {
	o.Team = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *CoreDescribeTeamOfServiceResponse) GetTenant() string {
	if o == nil || o.Tenant == nil {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeTeamOfServiceResponse) GetTenantOk() (*string, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *CoreDescribeTeamOfServiceResponse) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *CoreDescribeTeamOfServiceResponse) SetTenant(v string) {
	o.Tenant = &v
}

func (o CoreDescribeTeamOfServiceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Team != nil {
		toSerialize["team"] = o.Team
	}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	return json.Marshal(toSerialize)
}

type NullableCoreDescribeTeamOfServiceResponse struct {
	value *CoreDescribeTeamOfServiceResponse
	isSet bool
}

func (v NullableCoreDescribeTeamOfServiceResponse) Get() *CoreDescribeTeamOfServiceResponse {
	return v.value
}

func (v *NullableCoreDescribeTeamOfServiceResponse) Set(val *CoreDescribeTeamOfServiceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreDescribeTeamOfServiceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreDescribeTeamOfServiceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreDescribeTeamOfServiceResponse(val *CoreDescribeTeamOfServiceResponse) *NullableCoreDescribeTeamOfServiceResponse {
	return &NullableCoreDescribeTeamOfServiceResponse{value: val, isSet: true}
}

func (v NullableCoreDescribeTeamOfServiceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreDescribeTeamOfServiceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


