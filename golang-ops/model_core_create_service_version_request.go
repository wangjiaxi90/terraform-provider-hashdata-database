/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreCreateServiceVersionRequest struct for CoreCreateServiceVersionRequest
type CoreCreateServiceVersionRequest struct {
	Arch *string `json:"arch,omitempty"`
	DowngradeTo *[]string `json:"downgrade_to,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Image *string `json:"image,omitempty"`
	Region *string `json:"region,omitempty"`
	Type *string `json:"type,omitempty"`
	UpgradeFrom *[]string `json:"upgrade_from,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewCoreCreateServiceVersionRequest instantiates a new CoreCreateServiceVersionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCreateServiceVersionRequest() *CoreCreateServiceVersionRequest {
	this := CoreCreateServiceVersionRequest{}
	return &this
}

// NewCoreCreateServiceVersionRequestWithDefaults instantiates a new CoreCreateServiceVersionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCreateServiceVersionRequestWithDefaults() *CoreCreateServiceVersionRequest {
	this := CoreCreateServiceVersionRequest{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *CoreCreateServiceVersionRequest) GetArch() string {
	if o == nil || o.Arch == nil {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCreateServiceVersionRequest) GetArchOk() (*string, bool) {
	if o == nil || o.Arch == nil {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *CoreCreateServiceVersionRequest) HasArch() bool {
	if o != nil && o.Arch != nil {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *CoreCreateServiceVersionRequest) SetArch(v string) {
	o.Arch = &v
}

// GetDowngradeTo returns the DowngradeTo field value if set, zero value otherwise.
func (o *CoreCreateServiceVersionRequest) GetDowngradeTo() []string {
	if o == nil || o.DowngradeTo == nil {
		var ret []string
		return ret
	}
	return *o.DowngradeTo
}

// GetDowngradeToOk returns a tuple with the DowngradeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCreateServiceVersionRequest) GetDowngradeToOk() (*[]string, bool) {
	if o == nil || o.DowngradeTo == nil {
		return nil, false
	}
	return o.DowngradeTo, true
}

// HasDowngradeTo returns a boolean if a field has been set.
func (o *CoreCreateServiceVersionRequest) HasDowngradeTo() bool {
	if o != nil && o.DowngradeTo != nil {
		return true
	}

	return false
}

// SetDowngradeTo gets a reference to the given []string and assigns it to the DowngradeTo field.
func (o *CoreCreateServiceVersionRequest) SetDowngradeTo(v []string) {
	o.DowngradeTo = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CoreCreateServiceVersionRequest) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCreateServiceVersionRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CoreCreateServiceVersionRequest) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CoreCreateServiceVersionRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *CoreCreateServiceVersionRequest) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCreateServiceVersionRequest) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *CoreCreateServiceVersionRequest) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *CoreCreateServiceVersionRequest) SetImage(v string) {
	o.Image = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CoreCreateServiceVersionRequest) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCreateServiceVersionRequest) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CoreCreateServiceVersionRequest) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CoreCreateServiceVersionRequest) SetRegion(v string) {
	o.Region = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CoreCreateServiceVersionRequest) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCreateServiceVersionRequest) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CoreCreateServiceVersionRequest) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CoreCreateServiceVersionRequest) SetType(v string) {
	o.Type = &v
}

// GetUpgradeFrom returns the UpgradeFrom field value if set, zero value otherwise.
func (o *CoreCreateServiceVersionRequest) GetUpgradeFrom() []string {
	if o == nil || o.UpgradeFrom == nil {
		var ret []string
		return ret
	}
	return *o.UpgradeFrom
}

// GetUpgradeFromOk returns a tuple with the UpgradeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCreateServiceVersionRequest) GetUpgradeFromOk() (*[]string, bool) {
	if o == nil || o.UpgradeFrom == nil {
		return nil, false
	}
	return o.UpgradeFrom, true
}

// HasUpgradeFrom returns a boolean if a field has been set.
func (o *CoreCreateServiceVersionRequest) HasUpgradeFrom() bool {
	if o != nil && o.UpgradeFrom != nil {
		return true
	}

	return false
}

// SetUpgradeFrom gets a reference to the given []string and assigns it to the UpgradeFrom field.
func (o *CoreCreateServiceVersionRequest) SetUpgradeFrom(v []string) {
	o.UpgradeFrom = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CoreCreateServiceVersionRequest) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCreateServiceVersionRequest) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CoreCreateServiceVersionRequest) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CoreCreateServiceVersionRequest) SetVersion(v string) {
	o.Version = &v
}

func (o CoreCreateServiceVersionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arch != nil {
		toSerialize["arch"] = o.Arch
	}
	if o.DowngradeTo != nil {
		toSerialize["downgrade_to"] = o.DowngradeTo
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UpgradeFrom != nil {
		toSerialize["upgrade_from"] = o.UpgradeFrom
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableCoreCreateServiceVersionRequest struct {
	value *CoreCreateServiceVersionRequest
	isSet bool
}

func (v NullableCoreCreateServiceVersionRequest) Get() *CoreCreateServiceVersionRequest {
	return v.value
}

func (v *NullableCoreCreateServiceVersionRequest) Set(val *CoreCreateServiceVersionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCreateServiceVersionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCreateServiceVersionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCreateServiceVersionRequest(val *CoreCreateServiceVersionRequest) *NullableCoreCreateServiceVersionRequest {
	return &NullableCoreCreateServiceVersionRequest{value: val, isSet: true}
}

func (v NullableCoreCreateServiceVersionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCreateServiceVersionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


