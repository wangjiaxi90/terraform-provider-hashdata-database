/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreCountServiceResponse struct for CoreCountServiceResponse
type CoreCountServiceResponse struct {
	Health *string `json:"health,omitempty"`
	Sum *string `json:"sum,omitempty"`
	Unhealth *string `json:"unhealth,omitempty"`
	UnhealthRecovering *string `json:"unhealth_recovering,omitempty"`
}

// NewCoreCountServiceResponse instantiates a new CoreCountServiceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCountServiceResponse() *CoreCountServiceResponse {
	this := CoreCountServiceResponse{}
	return &this
}

// NewCoreCountServiceResponseWithDefaults instantiates a new CoreCountServiceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCountServiceResponseWithDefaults() *CoreCountServiceResponse {
	this := CoreCountServiceResponse{}
	return &this
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *CoreCountServiceResponse) GetHealth() string {
	if o == nil || o.Health == nil {
		var ret string
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCountServiceResponse) GetHealthOk() (*string, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *CoreCountServiceResponse) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given string and assigns it to the Health field.
func (o *CoreCountServiceResponse) SetHealth(v string) {
	o.Health = &v
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *CoreCountServiceResponse) GetSum() string {
	if o == nil || o.Sum == nil {
		var ret string
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCountServiceResponse) GetSumOk() (*string, bool) {
	if o == nil || o.Sum == nil {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *CoreCountServiceResponse) HasSum() bool {
	if o != nil && o.Sum != nil {
		return true
	}

	return false
}

// SetSum gets a reference to the given string and assigns it to the Sum field.
func (o *CoreCountServiceResponse) SetSum(v string) {
	o.Sum = &v
}

// GetUnhealth returns the Unhealth field value if set, zero value otherwise.
func (o *CoreCountServiceResponse) GetUnhealth() string {
	if o == nil || o.Unhealth == nil {
		var ret string
		return ret
	}
	return *o.Unhealth
}

// GetUnhealthOk returns a tuple with the Unhealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCountServiceResponse) GetUnhealthOk() (*string, bool) {
	if o == nil || o.Unhealth == nil {
		return nil, false
	}
	return o.Unhealth, true
}

// HasUnhealth returns a boolean if a field has been set.
func (o *CoreCountServiceResponse) HasUnhealth() bool {
	if o != nil && o.Unhealth != nil {
		return true
	}

	return false
}

// SetUnhealth gets a reference to the given string and assigns it to the Unhealth field.
func (o *CoreCountServiceResponse) SetUnhealth(v string) {
	o.Unhealth = &v
}

// GetUnhealthRecovering returns the UnhealthRecovering field value if set, zero value otherwise.
func (o *CoreCountServiceResponse) GetUnhealthRecovering() string {
	if o == nil || o.UnhealthRecovering == nil {
		var ret string
		return ret
	}
	return *o.UnhealthRecovering
}

// GetUnhealthRecoveringOk returns a tuple with the UnhealthRecovering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCountServiceResponse) GetUnhealthRecoveringOk() (*string, bool) {
	if o == nil || o.UnhealthRecovering == nil {
		return nil, false
	}
	return o.UnhealthRecovering, true
}

// HasUnhealthRecovering returns a boolean if a field has been set.
func (o *CoreCountServiceResponse) HasUnhealthRecovering() bool {
	if o != nil && o.UnhealthRecovering != nil {
		return true
	}

	return false
}

// SetUnhealthRecovering gets a reference to the given string and assigns it to the UnhealthRecovering field.
func (o *CoreCountServiceResponse) SetUnhealthRecovering(v string) {
	o.UnhealthRecovering = &v
}

func (o CoreCountServiceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	if o.Sum != nil {
		toSerialize["sum"] = o.Sum
	}
	if o.Unhealth != nil {
		toSerialize["unhealth"] = o.Unhealth
	}
	if o.UnhealthRecovering != nil {
		toSerialize["unhealth_recovering"] = o.UnhealthRecovering
	}
	return json.Marshal(toSerialize)
}

type NullableCoreCountServiceResponse struct {
	value *CoreCountServiceResponse
	isSet bool
}

func (v NullableCoreCountServiceResponse) Get() *CoreCountServiceResponse {
	return v.value
}

func (v *NullableCoreCountServiceResponse) Set(val *CoreCountServiceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCountServiceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCountServiceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCountServiceResponse(val *CoreCountServiceResponse) *NullableCoreCountServiceResponse {
	return &NullableCoreCountServiceResponse{value: val, isSet: true}
}

func (v NullableCoreCountServiceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCountServiceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


