/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreCalculateDiskResponse struct for CoreCalculateDiskResponse
type CoreCalculateDiskResponse struct {
	Disk *int32 `json:"disk,omitempty"`
}

// NewCoreCalculateDiskResponse instantiates a new CoreCalculateDiskResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCalculateDiskResponse() *CoreCalculateDiskResponse {
	this := CoreCalculateDiskResponse{}
	return &this
}

// NewCoreCalculateDiskResponseWithDefaults instantiates a new CoreCalculateDiskResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCalculateDiskResponseWithDefaults() *CoreCalculateDiskResponse {
	this := CoreCalculateDiskResponse{}
	return &this
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *CoreCalculateDiskResponse) GetDisk() int32 {
	if o == nil || o.Disk == nil {
		var ret int32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreCalculateDiskResponse) GetDiskOk() (*int32, bool) {
	if o == nil || o.Disk == nil {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *CoreCalculateDiskResponse) HasDisk() bool {
	if o != nil && o.Disk != nil {
		return true
	}

	return false
}

// SetDisk gets a reference to the given int32 and assigns it to the Disk field.
func (o *CoreCalculateDiskResponse) SetDisk(v int32) {
	o.Disk = &v
}

func (o CoreCalculateDiskResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Disk != nil {
		toSerialize["disk"] = o.Disk
	}
	return json.Marshal(toSerialize)
}

type NullableCoreCalculateDiskResponse struct {
	value *CoreCalculateDiskResponse
	isSet bool
}

func (v NullableCoreCalculateDiskResponse) Get() *CoreCalculateDiskResponse {
	return v.value
}

func (v *NullableCoreCalculateDiskResponse) Set(val *CoreCalculateDiskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCalculateDiskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCalculateDiskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCalculateDiskResponse(val *CoreCalculateDiskResponse) *NullableCoreCalculateDiskResponse {
	return &NullableCoreCalculateDiskResponse{value: val, isSet: true}
}

func (v NullableCoreCalculateDiskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCalculateDiskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


