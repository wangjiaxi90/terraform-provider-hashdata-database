/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreReservedResource struct for CoreReservedResource
type CoreReservedResource struct {
	Instances *[]string `json:"instances,omitempty"`
	ResourcePool *string `json:"resource_pool,omitempty"`
}

// NewCoreReservedResource instantiates a new CoreReservedResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreReservedResource() *CoreReservedResource {
	this := CoreReservedResource{}
	return &this
}

// NewCoreReservedResourceWithDefaults instantiates a new CoreReservedResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreReservedResourceWithDefaults() *CoreReservedResource {
	this := CoreReservedResource{}
	return &this
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *CoreReservedResource) GetInstances() []string {
	if o == nil || o.Instances == nil {
		var ret []string
		return ret
	}
	return *o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreReservedResource) GetInstancesOk() (*[]string, bool) {
	if o == nil || o.Instances == nil {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *CoreReservedResource) HasInstances() bool {
	if o != nil && o.Instances != nil {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []string and assigns it to the Instances field.
func (o *CoreReservedResource) SetInstances(v []string) {
	o.Instances = &v
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise.
func (o *CoreReservedResource) GetResourcePool() string {
	if o == nil || o.ResourcePool == nil {
		var ret string
		return ret
	}
	return *o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreReservedResource) GetResourcePoolOk() (*string, bool) {
	if o == nil || o.ResourcePool == nil {
		return nil, false
	}
	return o.ResourcePool, true
}

// HasResourcePool returns a boolean if a field has been set.
func (o *CoreReservedResource) HasResourcePool() bool {
	if o != nil && o.ResourcePool != nil {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given string and assigns it to the ResourcePool field.
func (o *CoreReservedResource) SetResourcePool(v string) {
	o.ResourcePool = &v
}

func (o CoreReservedResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Instances != nil {
		toSerialize["instances"] = o.Instances
	}
	if o.ResourcePool != nil {
		toSerialize["resource_pool"] = o.ResourcePool
	}
	return json.Marshal(toSerialize)
}

type NullableCoreReservedResource struct {
	value *CoreReservedResource
	isSet bool
}

func (v NullableCoreReservedResource) Get() *CoreReservedResource {
	return v.value
}

func (v *NullableCoreReservedResource) Set(val *CoreReservedResource) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreReservedResource) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreReservedResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreReservedResource(val *CoreReservedResource) *NullableCoreReservedResource {
	return &NullableCoreReservedResource{value: val, isSet: true}
}

func (v NullableCoreReservedResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreReservedResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


