/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreUpdateVersionDetailRequest struct for CoreUpdateVersionDetailRequest
type CoreUpdateVersionDetailRequest struct {
	Versions *[]string `json:"versions,omitempty"`
}

// NewCoreUpdateVersionDetailRequest instantiates a new CoreUpdateVersionDetailRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreUpdateVersionDetailRequest() *CoreUpdateVersionDetailRequest {
	this := CoreUpdateVersionDetailRequest{}
	return &this
}

// NewCoreUpdateVersionDetailRequestWithDefaults instantiates a new CoreUpdateVersionDetailRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreUpdateVersionDetailRequestWithDefaults() *CoreUpdateVersionDetailRequest {
	this := CoreUpdateVersionDetailRequest{}
	return &this
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *CoreUpdateVersionDetailRequest) GetVersions() []string {
	if o == nil || o.Versions == nil {
		var ret []string
		return ret
	}
	return *o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreUpdateVersionDetailRequest) GetVersionsOk() (*[]string, bool) {
	if o == nil || o.Versions == nil {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *CoreUpdateVersionDetailRequest) HasVersions() bool {
	if o != nil && o.Versions != nil {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *CoreUpdateVersionDetailRequest) SetVersions(v []string) {
	o.Versions = &v
}

func (o CoreUpdateVersionDetailRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Versions != nil {
		toSerialize["versions"] = o.Versions
	}
	return json.Marshal(toSerialize)
}

type NullableCoreUpdateVersionDetailRequest struct {
	value *CoreUpdateVersionDetailRequest
	isSet bool
}

func (v NullableCoreUpdateVersionDetailRequest) Get() *CoreUpdateVersionDetailRequest {
	return v.value
}

func (v *NullableCoreUpdateVersionDetailRequest) Set(val *CoreUpdateVersionDetailRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreUpdateVersionDetailRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreUpdateVersionDetailRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreUpdateVersionDetailRequest(val *CoreUpdateVersionDetailRequest) *NullableCoreUpdateVersionDetailRequest {
	return &NullableCoreUpdateVersionDetailRequest{value: val, isSet: true}
}

func (v NullableCoreUpdateVersionDetailRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreUpdateVersionDetailRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


