/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreDescribeRoleResponse struct for CoreDescribeRoleResponse
type CoreDescribeRoleResponse struct {
	Actions *[]string `json:"actions,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewCoreDescribeRoleResponse instantiates a new CoreDescribeRoleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreDescribeRoleResponse() *CoreDescribeRoleResponse {
	this := CoreDescribeRoleResponse{}
	return &this
}

// NewCoreDescribeRoleResponseWithDefaults instantiates a new CoreDescribeRoleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreDescribeRoleResponseWithDefaults() *CoreDescribeRoleResponse {
	this := CoreDescribeRoleResponse{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *CoreDescribeRoleResponse) GetActions() []string {
	if o == nil || o.Actions == nil {
		var ret []string
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeRoleResponse) GetActionsOk() (*[]string, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *CoreDescribeRoleResponse) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *CoreDescribeRoleResponse) SetActions(v []string) {
	o.Actions = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CoreDescribeRoleResponse) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeRoleResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CoreDescribeRoleResponse) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CoreDescribeRoleResponse) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CoreDescribeRoleResponse) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeRoleResponse) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CoreDescribeRoleResponse) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CoreDescribeRoleResponse) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CoreDescribeRoleResponse) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDescribeRoleResponse) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CoreDescribeRoleResponse) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CoreDescribeRoleResponse) SetName(v string) {
	o.Name = &v
}

func (o CoreDescribeRoleResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableCoreDescribeRoleResponse struct {
	value *CoreDescribeRoleResponse
	isSet bool
}

func (v NullableCoreDescribeRoleResponse) Get() *CoreDescribeRoleResponse {
	return v.value
}

func (v *NullableCoreDescribeRoleResponse) Set(val *CoreDescribeRoleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreDescribeRoleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreDescribeRoleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreDescribeRoleResponse(val *CoreDescribeRoleResponse) *NullableCoreDescribeRoleResponse {
	return &NullableCoreDescribeRoleResponse{value: val, isSet: true}
}

func (v NullableCoreDescribeRoleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreDescribeRoleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


