/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CommonResourceInfo struct for CommonResourceInfo
type CommonResourceInfo struct {
	AllocatedValue *int32 `json:"allocatedValue,omitempty"`
	ResCode *string `json:"resCode,omitempty"`
	TotalValue *int32 `json:"totalValue,omitempty"`
	UsedValue *int32 `json:"usedValue,omitempty"`
}

// NewCommonResourceInfo instantiates a new CommonResourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonResourceInfo() *CommonResourceInfo {
	this := CommonResourceInfo{}
	return &this
}

// NewCommonResourceInfoWithDefaults instantiates a new CommonResourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonResourceInfoWithDefaults() *CommonResourceInfo {
	this := CommonResourceInfo{}
	return &this
}

// GetAllocatedValue returns the AllocatedValue field value if set, zero value otherwise.
func (o *CommonResourceInfo) GetAllocatedValue() int32 {
	if o == nil || o.AllocatedValue == nil {
		var ret int32
		return ret
	}
	return *o.AllocatedValue
}

// GetAllocatedValueOk returns a tuple with the AllocatedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonResourceInfo) GetAllocatedValueOk() (*int32, bool) {
	if o == nil || o.AllocatedValue == nil {
		return nil, false
	}
	return o.AllocatedValue, true
}

// HasAllocatedValue returns a boolean if a field has been set.
func (o *CommonResourceInfo) HasAllocatedValue() bool {
	if o != nil && o.AllocatedValue != nil {
		return true
	}

	return false
}

// SetAllocatedValue gets a reference to the given int32 and assigns it to the AllocatedValue field.
func (o *CommonResourceInfo) SetAllocatedValue(v int32) {
	o.AllocatedValue = &v
}

// GetResCode returns the ResCode field value if set, zero value otherwise.
func (o *CommonResourceInfo) GetResCode() string {
	if o == nil || o.ResCode == nil {
		var ret string
		return ret
	}
	return *o.ResCode
}

// GetResCodeOk returns a tuple with the ResCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonResourceInfo) GetResCodeOk() (*string, bool) {
	if o == nil || o.ResCode == nil {
		return nil, false
	}
	return o.ResCode, true
}

// HasResCode returns a boolean if a field has been set.
func (o *CommonResourceInfo) HasResCode() bool {
	if o != nil && o.ResCode != nil {
		return true
	}

	return false
}

// SetResCode gets a reference to the given string and assigns it to the ResCode field.
func (o *CommonResourceInfo) SetResCode(v string) {
	o.ResCode = &v
}

// GetTotalValue returns the TotalValue field value if set, zero value otherwise.
func (o *CommonResourceInfo) GetTotalValue() int32 {
	if o == nil || o.TotalValue == nil {
		var ret int32
		return ret
	}
	return *o.TotalValue
}

// GetTotalValueOk returns a tuple with the TotalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonResourceInfo) GetTotalValueOk() (*int32, bool) {
	if o == nil || o.TotalValue == nil {
		return nil, false
	}
	return o.TotalValue, true
}

// HasTotalValue returns a boolean if a field has been set.
func (o *CommonResourceInfo) HasTotalValue() bool {
	if o != nil && o.TotalValue != nil {
		return true
	}

	return false
}

// SetTotalValue gets a reference to the given int32 and assigns it to the TotalValue field.
func (o *CommonResourceInfo) SetTotalValue(v int32) {
	o.TotalValue = &v
}

// GetUsedValue returns the UsedValue field value if set, zero value otherwise.
func (o *CommonResourceInfo) GetUsedValue() int32 {
	if o == nil || o.UsedValue == nil {
		var ret int32
		return ret
	}
	return *o.UsedValue
}

// GetUsedValueOk returns a tuple with the UsedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonResourceInfo) GetUsedValueOk() (*int32, bool) {
	if o == nil || o.UsedValue == nil {
		return nil, false
	}
	return o.UsedValue, true
}

// HasUsedValue returns a boolean if a field has been set.
func (o *CommonResourceInfo) HasUsedValue() bool {
	if o != nil && o.UsedValue != nil {
		return true
	}

	return false
}

// SetUsedValue gets a reference to the given int32 and assigns it to the UsedValue field.
func (o *CommonResourceInfo) SetUsedValue(v int32) {
	o.UsedValue = &v
}

func (o CommonResourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllocatedValue != nil {
		toSerialize["allocatedValue"] = o.AllocatedValue
	}
	if o.ResCode != nil {
		toSerialize["resCode"] = o.ResCode
	}
	if o.TotalValue != nil {
		toSerialize["totalValue"] = o.TotalValue
	}
	if o.UsedValue != nil {
		toSerialize["usedValue"] = o.UsedValue
	}
	return json.Marshal(toSerialize)
}

type NullableCommonResourceInfo struct {
	value *CommonResourceInfo
	isSet bool
}

func (v NullableCommonResourceInfo) Get() *CommonResourceInfo {
	return v.value
}

func (v *NullableCommonResourceInfo) Set(val *CommonResourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonResourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonResourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonResourceInfo(val *CommonResourceInfo) *NullableCommonResourceInfo {
	return &NullableCommonResourceInfo{value: val, isSet: true}
}

func (v NullableCommonResourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonResourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


