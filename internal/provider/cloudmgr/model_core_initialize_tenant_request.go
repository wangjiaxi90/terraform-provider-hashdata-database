/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreInitializeTenantRequest struct for CoreInitializeTenantRequest
type CoreInitializeTenantRequest struct {
	Tenant *string `json:"tenant,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
}

// NewCoreInitializeTenantRequest instantiates a new CoreInitializeTenantRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreInitializeTenantRequest() *CoreInitializeTenantRequest {
	this := CoreInitializeTenantRequest{}
	return &this
}

// NewCoreInitializeTenantRequestWithDefaults instantiates a new CoreInitializeTenantRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreInitializeTenantRequestWithDefaults() *CoreInitializeTenantRequest {
	this := CoreInitializeTenantRequest{}
	return &this
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *CoreInitializeTenantRequest) GetTenant() string {
	if o == nil || o.Tenant == nil {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreInitializeTenantRequest) GetTenantOk() (*string, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *CoreInitializeTenantRequest) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *CoreInitializeTenantRequest) SetTenant(v string) {
	o.Tenant = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *CoreInitializeTenantRequest) GetVendor() string {
	if o == nil || o.Vendor == nil {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreInitializeTenantRequest) GetVendorOk() (*string, bool) {
	if o == nil || o.Vendor == nil {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *CoreInitializeTenantRequest) HasVendor() bool {
	if o != nil && o.Vendor != nil {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *CoreInitializeTenantRequest) SetVendor(v string) {
	o.Vendor = &v
}

func (o CoreInitializeTenantRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	if o.Vendor != nil {
		toSerialize["vendor"] = o.Vendor
	}
	return json.Marshal(toSerialize)
}

type NullableCoreInitializeTenantRequest struct {
	value *CoreInitializeTenantRequest
	isSet bool
}

func (v NullableCoreInitializeTenantRequest) Get() *CoreInitializeTenantRequest {
	return v.value
}

func (v *NullableCoreInitializeTenantRequest) Set(val *CoreInitializeTenantRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreInitializeTenantRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreInitializeTenantRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreInitializeTenantRequest(val *CoreInitializeTenantRequest) *NullableCoreInitializeTenantRequest {
	return &NullableCoreInitializeTenantRequest{value: val, isSet: true}
}

func (v NullableCoreInitializeTenantRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreInitializeTenantRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


