/*
 * Cloud Manager API
 *
 * Cloud Manager Restful API Documentation.
 *
 * API version: v2.0
 * Contact: wang@hashdata.cn
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmgr

import (
	"encoding/json"
)

// CoreHost struct for CoreHost
type CoreHost struct {
	Hostname *string `json:"hostname,omitempty"`
	Ip *string `json:"ip,omitempty"`
}

// NewCoreHost instantiates a new CoreHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreHost() *CoreHost {
	this := CoreHost{}
	return &this
}

// NewCoreHostWithDefaults instantiates a new CoreHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreHostWithDefaults() *CoreHost {
	this := CoreHost{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *CoreHost) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreHost) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *CoreHost) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *CoreHost) SetHostname(v string) {
	o.Hostname = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *CoreHost) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreHost) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *CoreHost) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *CoreHost) SetIp(v string) {
	o.Ip = &v
}

func (o CoreHost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	return json.Marshal(toSerialize)
}

type NullableCoreHost struct {
	value *CoreHost
	isSet bool
}

func (v NullableCoreHost) Get() *CoreHost {
	return v.value
}

func (v *NullableCoreHost) Set(val *CoreHost) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreHost) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreHost(val *CoreHost) *NullableCoreHost {
	return &NullableCoreHost{value: val, isSet: true}
}

func (v NullableCoreHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


